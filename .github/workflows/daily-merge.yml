name: Merge Oldest Stag or Queue Branch

on:
  schedule:
    - cron: "0 1 * * *" # 6:00 AM PKT
  workflow_dispatch:

permissions:
  contents: write

jobs:
  merge:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch stag-* and queue-* branches
        run: |
          git fetch --no-tags --prune origin \
            "+refs/heads/stag-*:refs/remotes/origin/stag-*" \
            "+refs/heads/queue-*:refs/remotes/origin/queue-*"
          echo "Remote branches fetched:"
          git branch -r

      - name: Configure Git
        run: |
          git config --global user.name "Sohaib-Sana"
          git config --global user.email "dev.sohaibsana@gmail.com"

      - name: Check for oldest stag-* or queue-* branch
        id: find_branch
        shell: bash
        run: |
          echo "üîç Searching for stag-* branches..."
          stag_branch=$(git for-each-ref --sort=committerdate --format='%(refname:short)' refs/remotes/origin/stag-* | head -n 1 || true)

          if [[ -n "$stag_branch" ]]; then
            echo "üü† Found stag branch: $stag_branch"
            echo "branch_name=${stag_branch#origin/}" >> "$GITHUB_OUTPUT"
            echo "target_branch=stag" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "üîç No stag-* branch found. Checking for queue-* branches..."
          queue_branch=$(git for-each-ref --sort=committerdate --format='%(refname:short)' refs/remotes/origin/queue-* | head -n 1 || true)

          if [[ -n "$queue_branch" ]]; then
            echo "üü¢ Found queue branch: $queue_branch"
            echo "branch_name=${queue_branch#origin/}" >> "$GITHUB_OUTPUT"
            echo "target_branch=main" >> "$GITHUB_OUTPUT"
          else
            echo "‚ùå No stag-* or queue-* branches found. Exiting."
            echo "branch_name=" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout target branch
        if: steps.find_branch.outputs.branch_name != ''
        run: |
          git checkout "${{ steps.find_branch.outputs.target_branch }}"
          git pull origin "${{ steps.find_branch.outputs.target_branch }}"

      - name: Merge into target branch
        if: steps.find_branch.outputs.branch_name != ''
        run: |
          echo "üîÅ Merging '${{ steps.find_branch.outputs.branch_name }}' into '${{ steps.find_branch.outputs.target_branch }}'..."
          git merge "origin/${{ steps.find_branch.outputs.branch_name }}" --no-edit || echo "Nothing to merge"

      - name: Push and delete merged branch
        if: steps.find_branch.outputs.branch_name != ''
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/Sohaib-Sana/portfolio.git
          git push origin "${{ steps.find_branch.outputs.target_branch }}"
          git push origin --delete "${{ steps.find_branch.outputs.branch_name }}"
          echo "üßπ Deleted merged branch: ${{ steps.find_branch.outputs.branch_name }}"

      - name: Notify via Telegram
        if: steps.find_branch.outputs.branch_name != ''
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="‚úÖ Merged '${{ steps.find_branch.outputs.branch_name }}' into '${{ steps.find_branch.outputs.target_branch }}' and deleted the branch."

      - name: Trigger deploy for target branch
        if: steps.find_branch.outputs.branch_name != ''
        run: |
          echo "üöÄ Triggering deploy for '${{ steps.find_branch.outputs.target_branch }}'..."
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GH_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/Sohaib-Sana/portfolio/actions/workflows/deploy.yml/dispatches \
            -d "{\"ref\":\"${{ steps.find_branch.outputs.target_branch }}\"}"
